coef.boot[i, ] <- coef(fit.boot)
agep80.boot[i] <- (0.84162 - coef(fit.boot)[1])/coef(fit.boot)[2]
}
summary(fit.boot)
apply(coef.boot, 2, sd)
git help
data("airquality")
# Code for ggplot
## first, aes ##
data("airquality")
airquality %>%
ggplot(aes(x = Solar.R, y = Ozone))
# Code for ggplot
## first, aes ##
library(tidyverse)
data("airquality")
airquality %>%
ggplot(aes(x = Solar.R, y = Ozone))
?airquality
head(airquality)
# geometric object #
airquality %>%
ggplot(aes(x = Solar.R, y = Ozone)) +
geom_plot()
# Code for ggplot
## first, aes ##
library(tidyverse)
data("airquality")
airquality %>%
# just create graph with solar as x, and ozone as y
ggplot(aes(x = Solar.R, y = Ozone))
# geometric object #
airquality %>%
ggplot(aes(x = Solar.R, y = Ozone)) +
geom_point()
# Code for ggplot
## first, aes ##
library(tidyverse)
data("airquality")
p1=airquality %>%
# just create graph with solar as x, and ozone as y
ggplot(aes(x = Solar.R, y = Ozone))
# geometric object #
p2=airquality %>%
ggplot(aes(x = Solar.R, y = Ozone)) +
# add point to figure
geom_point()
View(p1)
View(p2)
View(p1)
View(p2)
p1
p2
# Code for ggplot
## first, aes ##
library(tidyverse)
data("airquality")
p1=airquality %>%
# just create graph with solar as x, and ozone as y
ggplot(aes(x = Solar.R, y = Ozone))
# geometric object #
p2=airquality %>%
ggplot(aes(x = Solar.R, y = Ozone)) +
# add point to figure
geom_point()
# use different colour to show different months
airquality %>%
ggplot(aes(x = Solar.R, y = Ozone, color=factor(Month)))
geom_point()
# use different colour to show different months
airquality %>%
ggplot(aes(x = Solar.R, y = Ozone, color=factor(Month))) +
geom_point()
# store graph structure as variable to save coding time
p1=airquality %>%
# just create graph with solar as x, and ozone as y
ggplot(aes(x = Solar.R, y = Ozone))
# gives the same as the uncommented section above. saves coding time.
p1 + geom_point()
# use different colour to show different months
airquality %>%
ggplot(aes(x = Solar.R, y = Ozone, color=factor(Month))) +
geom_point()
# add geomsmooth
airquality %>%
ggplot(aes(x = Solar.R, y = Ozone, color=factor(Month))) +
geom_point() +
geom_smooth()
# add geomsmooth
ggplot(aes(x = Solar.R, y = Ozone) +
# does smoothing for each curve for each month
# does smoothing for each curve for each month
# very hard to read though - problematic
geom_smooth()
# add geomsmooth
airquality %>%
# add geomsmooth
airquality %>%
ggplot(aes(x = Solar.R, y = Ozone)) +
geom_point() +
# does smoothing for each curve for each month
# very hard to read though - problematic
geom_smooth()
# might not be able to distinguish between overlapping points
# use hex function to solve this
airquality %>%
ggplot(aes(x = Solar.R, y = Ozone)) +
geom_hex()
library(hexbin)
library(lattice)
# might not be able to distinguish between overlapping points
# use hex function to solve this
airquality %>%
ggplot(aes(x = Solar.R, y = Ozone)) +
geom_hex()
# might not be able to distinguish between overlapping points
# use hex function to solve this
airquality %>%
ggplot(aes(x = Solar.R, y = Ozone)) +
geom_hex()
# Code for ggplot
## first, lets lok at the aestetic attributes (aes)
library(tidyverse)
data("airquality")
# store graph structure as variable to save coding time
p1=airquality %>%
# just create graph with solar as x, and ozone as y
ggplot(aes(x = Solar.R, y = Ozone))
# gives the same as the uncommented section above. saves coding time.
p1 + geom_point()
# use different colour to show different months
airquality %>%
ggplot(aes(x = Solar.R, y = Ozone, color=factor(Month))) +
geom_point()
# add geomsmooth
airquality %>%
ggplot(aes(x = Solar.R, y = Ozone)) +
geom_point() +
# does smoothing for each curve for each month if you divy up the data by month
# alternatively, it smooths out the whole data
# need to think about how many points there are per group. determines how valuable the smoothing curve is
geom_smooth()
# might not be able to distinguish between overlapping points
# use hex function to solve this
airquality %>%
ggplot(aes(x = Solar.R, y = Ozone)) +
geom_hex()
# use different colour to show different months
airquality %>%
ggplot(aes(x = Solar.R, y = Ozone, color=factor(Month))) +
# can use size parameters to change the look of the plot
geom_point(alpha=0.5)
# store graph structure as variable to save coding time
p1=airquality %>%
# just create graph with solar as x, and ozone as y
ggplot(aes(x = Solar.R, y = Ozone))
# gives the same as the uncommented section above. saves coding time.
p1 + geom_point(alpha=0.5, shape=".")
airquality %>%
# ozone is a numeric value. month is a factor (doesn't make sense to treat it as a numeric value). can use a boxplot to display information because of this
ggplot(aes(x = factor(Month), y = Ozone)) +
geom_boxplot()
airquality %>%
ggplot(aes(x = Solar.R, y = Ozone)) +
geom_point() +
facet_wrap(~Month, nrow = 2)
# incorporating data processing
mutate(TempGp = cut(Temp,
inc = TRUE)) %>%
breaks = quantile(Temp, (0:4)/4,
ggplot(aes(x = Solar.R, y = Ozone)) +
facet_grid(WindGp ~ TempGp)
# incorporating data processing
mutate(TempGp = cut(Temp,
inc = TRUE)) %>%
# incorporating data processing
airquality %>% na.omit() %>%
breaks = quantile(Temp, (0:4)/4,
mutate(WindGp = cut(Wind,
inc = TRUE)) %>%
geom_point()
# incorporating data processing
# DOESNT WORK FOR SOME REASON
# incorporate data preprocessing step
breaks = quantile(Temp, (0:4)/4,
mutate(WindGp = cut(Wind,
inc = TRUE)) %>%
geom_point()
# Code for ggplot
## first, lets lok at the aestetic attributes (aes)
library(tidyverse)
# available through R
data("airquality")
# store graph structure as variable to save coding time
p1=airquality %>%
# just create graph with solar as x, and ozone as y
ggplot(aes(x = Solar.R, y = Ozone))
# gives the same as the uncommented section above. saves coding time.
# can use transparent parameters to change the look of the plot
p1 + geom_point(alpha=0.5, shape=".")
# use different colour to show different months
airquality %>%
ggplot(aes(x = Solar.R, y = Ozone, color=factor(Month))) +
geom_point()
# add geomsmooth
airquality %>%
ggplot(aes(x = Solar.R, y = Ozone)) +
geom_point() +
# does smoothing for each curve for each month if you divy up the data by month
# alternatively, it smooths out the whole data
# need to think about how many points there are per group. determines how valuable the smoothing curve is
geom_smooth()
# might not be able to distinguish between overlapping points
# use hex function to solve this
airquality %>%
ggplot(aes(x = Solar.R, y = Ozone)) +
geom_hex()
airquality %>%
# ozone is a numeric value. month is a factor (doesn't make sense to treat it as a numeric value). can use a boxplot to display information because of this
ggplot(aes(x = factor(Month), y = Ozone)) +
geom_boxplot()
airquality %>%
ggplot(aes(x = Solar.R, y = Ozone)) +
geom_point() +
# very useful for explloring 3+ variables. using a 3d plot is complicated and usually difficult to understand
# create plots for individual months. transform problems from 3d to 2d
# can also use facet_grid()
facet_wrap(~Month, nrow = 2)
# incorporating data processing
# incorporating data processing
# DOESNT WORK FOR SOME REASON
airquality %>% na.omit() %>%
# incorporate data preprocessing step
mutate(TempGp = cut(Temp,
inc = TRUE)) %>%
breaks = quantile(Wind, (0:4)/4,
ggplot(aes(x = Solar.R, y = Ozone)) +
facet_grid(WindGp ~ TempGp)
set.seed(991)
# incorporating data processing
# DOESNT WORK FOR SOME REASON
# incorporate data preprocessing step
breaks = quantile(Temp, (0:4)/4,
mutate(WindGp = cut(Wind,
inc = TRUE)) %>%
geom_point() +
set.seed(991)
df <- data.frame(x = c(rnorm(100,-2,1), rnorm(100,4,1)))
# Code for ggplot
## first, lets lok at the aestetic attributes (aes)
library(tidyverse)
# available through R
data("airquality")
set.seed(991)
df <- data.frame(x = c(rnorm(100,-2,1), rnorm(100,4,1)))
df %>% ggplot(aes(x=x)) +
geom_density()
df %>% ggplot(aes(x=x)) +
geom_boxplot()
# different plot
df %>% ggplot(aes(x=x)) +
geom_density()
# different plot (histogram) shows that the data is bimodal
df %>% ggplot(aes(x=x)) +
geom_density()
getwd()
setwd("/Users/tarineccleston/Documents/Masters/STATS 762/statistical-learning-for-DS/w2")
setwd("/Users/tarineccleston/Documents/Masters/STATS 765/statistical-learning-for-DS/w2")
# another example
cars_df <- read_csv("../data/VehicleYear-2019.csv")
# another example
cars_df <- read_csv("/data/VehicleYear-2019.csv")
# another example
cars_df <- read_csv("data/VehicleYear-2019.csv")
dim(cars_df)
head(names(cars_df), 20)
glimpse(cars_df)
# plots
cars_df %>%
ggplot(aes(x = GROSS_VEHICLE_MASS))
geom_histogram()
# plots
cars_df %>%
ggplot(aes(x = GROSS_VEHICLE_MASS))
geom_histogram()
# plots
cars_df %>%
ggplot(aes(x = GROSS_VEHICLE_MASS))
geom_histogram()
# plots
cars_df %>%
ggplot(aes(x = GROSS_VEHICLE_MASS)) +
geom_histogram()
cars_df %>%
# remove invalid car weights which are = 0
filter(GROSS_VEHICLE_MASS > 0,
POWER_RATING > 0)
ggplot(aes(x = POWER_RATING,
y = GROSS_VEHICLE_MASS)) +
geom_point()
cars_df %>%
# remove invalid car weights which are = 0
filter(GROSS_VEHICLE_MASS > 0,
POWER_RATING > 0) %>%
ggplot(aes(x = POWER_RATING,
y = GROSS_VEHICLE_MASS)) +
geom_point()
# um a little deaf because there was no sound in the Zoom recording
cars_df %>%
# remove invalid car weights which are = 0. only select Toyota data
filter(GROSS_VEHICLE_MASS > 0,
POWER_RATING > 0,
MAKE == 'TOYOTA') %>%
ggplot(aes(x = FIRST_NZ_REGISTRATION_YEAR,
y = GROSS_VEHICLE_MASS)) +
geom_point()
# um a little deaf because there was no sound in the Zoom recording
cars_df %>%
# remove invalid car weights which are = 0. only select Toyota data
filter(GROSS_VEHICLE_MASS > 0,
POWER_RATING > 0,
MAKE == 'TOYOTA') %>%
ggplot(aes(x = FIRST_NZ_REGISTRATION_YEAR,
y = GROSS_VEHICLE_MASS)) +
# geom_point()
geom_hex()
cars_df %>%
# remove invalid car weights which are = 0. only select Mitzubishi data
filter(GROSS_VEHICLE_MASS > 0,
POWER_RATING > 0,
MAKE == 'MITSUBISHI') %>%
ggplot(aes(x = FIRST_NZ_REGISTRATION_YEAR,
y = GROSS_VEHICLE_MASS)) +
# geom_point()
# show overlapping data
geom_hex()
cars_df %>%
# remove invalid car weights which are = 0. only select Mitzubishi data
filter(GROSS_VEHICLE_MASS > 0,
POWER_RATING > 0,
MAKE == 'MITSUBISHI') %>%
ggplot(aes(x = FIRST_NZ_REGISTRATION_YEAR,
y = GROSS_VEHICLE_MASS)) +
# geom_hex()
#
geom_jitter()
p <- cars_df %>%
filter(GROSS_VEHICLE_MASS > 0,
POWER_RATING > 0) %>%
ggplot(alpha = 0.05) +
labs(title = "Engine power vs. Car weight",
x = "Power rating (kw)",
y = "Vehicle mass (kg)",
caption = "Data from nzta.govt.nz")
p
p <- cars_df %>%
filter(GROSS_VEHICLE_MASS > 0,
POWER_RATING > 0) %>%
ggplot(alpha = 0.05) +
labs(title = "Engine power vs. Car weight",
x = "Power rating (kw)",
y = "Vehicle mass (kg)",
caption = "Data from nzta.govt.nz")
p
p <- cars_df %>%
filter(GROSS_VEHICLE_MASS > 0,
POWER_RATING > 0) %>%
ggplot(alpha = 0.05) +
labs(title = "Engine power vs. Car weight",
x = "Power rating (kw)",
y = "Vehicle mass (kg)",
caption = "Data from nzta.govt.nz")
p <- cars_df %>%
filter(GROSS_VEHICLE_MASS > 0,
POWER_RATING > 0) %>%
ggplot(alpha = 0.05) +
labs(title = "Engine power vs. Car weight",
x = "Power rating (kw)",
y = "Vehicle mass (kg)",
caption = "Data from nzta.govt.nz")
# another example
setwd("/Users/tarineccleston/Documents/Masters/STATS 765/statistical-learning-for-DS/w2")
cars_df <- read_csv("data/VehicleYear-2019.csv")
dim(cars_df)
head(names(cars_df), 20)
glimpse(cars_df)
p <- cars_df %>%
filter(GROSS_VEHICLE_MASS > 0,
POWER_RATING > 0) %>%
ggplot(alpha = 0.05) +
labs(title = "Engine power vs. Car weight",
x = "Power rating (kw)",
y = "Vehicle mass (kg)",
caption = "Data from nzta.govt.nz")
cars_df %>%
# remove invalid car weights which are = 0. only select Mitzubishi data
filter(GROSS_VEHICLE_MASS > 0,
POWER_RATING > 0,
MAKE == 'MITSUBISHI') %>%
ggplot(aes(x = FIRST_NZ_REGISTRATION_YEAR,
y = GROSS_VEHICLE_MASS)) +
# geom_hex()
# adds random variation between different points to show overlapping data
geom_jitter()
p <- cars_df %>%
filter(GROSS_VEHICLE_MASS > 0,
POWER_RATING > 0) %>%
ggplot(alpha = 0.05) +
labs(title = "Engine power vs. Car weight",
x = "Power rating (kw)",
y = "Vehicle mass (kg)",
caption = "Data from nzta.govt.nz")
# um a little deaf because there was no sound in the Zoom recording
cars_df %>%
# remove invalid car weights which are = 0. only select Toyota data
filter(GROSS_VEHICLE_MASS > 0,
POWER_RATING > 0,
MAKE == 'TOYOTA') %>%
ggplot(aes(x = FIRST_NZ_REGISTRATION_YEAR,
y = GROSS_VEHICLE_MASS)) +
# geom_point()
# show overlapping data
geom_hex()
p <- cars_df %>%
filter(GROSS_VEHICLE_MASS > 0,
POWER_RATING > 0) %>%
ggplot(alpha = 0.05) +
labs(title = "Engine power vs. Car weight",
x = "Power rating (kw)",
y = "Vehicle mass (kg)",
caption = "Data from nzta.govt.nz")
setwd("/Users/tarineccleston/Documents/Masters/STATS 765/statistical-learning-for-DS/w2")
library(tidyverse)
air_cond_df <- read_xlsr("/data/simulation_outpu1_raw.xlsx")
package(readxl)
library(readxl)
air_cond_df <- read_xlsr("/data/simulation_outpu1_raw.xlsx")
install.packages("readxl")
install.packages("readxl")
library(readxl)
air_cond_df <- read_xlsr("/data/simulation_outpu1_raw.xlsx")
air_cond_df <- read_xlsx("/data/simulation_outpu1_raw.xlsx")
air_cond_df <- read_xlsx("data/simulation_outpu1_raw.xlsx")
View(air_cond_df)
setwd("/Users/tarineccleston/Documents/Masters/STATS 765/statistical-learning-for-DS/w2")
library(tidyverse)
air_cond_df <- read_xlsx("data/simulation_outpu1_raw.xlsx")
View(air_cond_df)
set.seed(991) # replace "765" with your student ID.
n <- 200
x <- rnorm(n)
residual_std <- exp(x) # error standard deviation is exponential w.r.t. x values,
y <- 1.5+3*x + residual_std*rnorm(n)
# plot y and x
plot(x,y, xlab = "x", ylab = "y")
fit <- lm(y~x)
# get 95% confidence interval
confint(x_y_fit)
x_y_fit <- lm(y~x)
summary(x_y_fit)
# get 95% confidence interval
confint(x_y_fit)
data = cbind(x,y)
View(data)
x_y_fit <- lm(y~x, data = data)
x_y_df = cbind(x,y)
# plot y and x
plot(x,y, xlab = "x", ylab = "y")
x_y_fit <- lm(y~x, data = x_y_df)
x_y_df = dataframe(cbind(x,y))
x_y_df = data.frame(cbind(x,y))
# plot y and x
plot(x,y, xlab = "x", ylab = "y")
x_y_fit <- lm(y~x, data = x_y_df)
summary(x_y_fit)
# get 95% confidence interval
confint(x_y_fit)
summaery(x_y_fit)$coeff
summaery(x_y_fit)$coef
summary(x_y_fit)$coef
summary(x_y_fit)$coef['x',]
summary(x_y_fit)$coef['x','Std. Error']
summary(x_y_fit)$coef['x','Std. Error']
## Task 2.2
# What is the standard error of coefficient of X? What is the 95% confidence interval of the β1^? Interprete the p-value shown.
std_err_x <- summary(x_y_fit)$coef['x','Std. Error']
## Task 2.2
# What is the standard error of coefficient of X? What is the 95% confidence interval of the β1^? Interprete the p-value shown.
std_err_x <- round(summary(x_y_fit)$coef['x','Std. Error'])
std_err_x <- round(summary(x_y_fit)$coef['x','Pr(>|t|)'])
p_value_x <- round(summary(x_y_fit)$coef['x','Pr(>|t|)'])
confint(x_y_fit)
confint(x_y_fit)['x','97.5%']
confint(x_y_fit)['x','97.5 %']
confint(x_y_fit)['x','2.5 %']
package.install(sandvich)
packages.install(sandvich)
install.packages('sandwich')
# Step 3.1: Calculate se(βi^) use sandwich estimator.
library(sandwich)
# Step 3.1: Calculate se(βi^) use sandwich estimator.
library(sandwich)
vcovHC(x_y_fit, type = "HC")
# get the sandwich variance estimator manually
y <- matrix(y, ncol = 1)
x <- cbind(1, matrix(x, ncol = 1))
# Step 3.2: Inference
# Use the sandwich standard error for the cofficient of X to calculate the 95% confidence interval and p-value for β1
sqrt(diag(vcov(x_y_fit)))
# Step 3.2: Inference
# Use the sandwich standard error for the cofficient of X to calculate the 95% confidence interval and p-value for β1
sqrt(diag(vcov(x_y_fit)))
